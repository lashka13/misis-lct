"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API."""

import asyncio

import httpx


async def test_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API"""

    base_url = "http://localhost:8000"

    async with httpx.AsyncClient(timeout=180.0) as client:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Review Analysis\n")

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        print("1Ô∏è‚É£ GET /health")
        response = await client.get(f"{base_url}/health")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.json()}\n")

        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("2Ô∏è‚É£ GET /categories")
        response = await client.get(f"{base_url}/categories")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        categories = response.json()
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories[:5])}...\n")

        # 3. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (—Ç–æ–ª—å–∫–æ id –∏ text –ø–æ –¢–ó)
        print("3Ô∏è‚É£ POST /predict (–æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ –¢–ó)")
        test_reviews = {
            "data": [
                {"id": 1, "text": "–û—Ç–ª–∏—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏, –≤—Å–µ –±—ã—Å—Ç—Ä–æ –∏ –≤–µ–∂–ª–∏–≤–æ!"},
                {"id": 2, "text": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–≤–∏—Å–∞–µ—Ç, –æ—á–µ–Ω—å –Ω–µ—É–¥–æ–±–Ω–æ."},
                {"id": 3, "text": "–ö—Ä–µ–¥–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É –æ–¥–æ–±—Ä–∏–ª–∏ –±—ã—Å—Ç—Ä–æ, –Ω–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã—Å–æ–∫–∏–µ."},
            ]
        }

        response = await client.post(f"{base_url}/predict", json=test_reviews)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code == 200:
            predictions = response.json()["predictions"]
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(predictions)}")
            for pred in predictions:
                print(f"\n   –û—Ç–∑—ã–≤ #{pred['id']}:")
                print(f"   –¢–µ–∫—Å—Ç: {pred['text'][:50]}...")
                print(f"   –¢–µ–º—ã: {', '.join(pred['topics'])}")
                print(f"   –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {', '.join(pred['sentiments'])}")
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")

        print("\n" + "=" * 80 + "\n")

        # 3.1 –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç–∞–º–∏ (–¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞)
        print("3Ô∏è‚É£.1 POST /load-data (–∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)")
        load_data_reviews = {
            "data": [
                {
                    "id": 101,
                    "text": "–û—Ç–ª–∏—á–Ω—ã–π –±–∞–Ω–∫! –ë—ã—Å—Ç—Ä–æ –æ–¥–æ–±—Ä–∏–ª–∏ –∏–ø–æ—Ç–µ–∫—É.",
                    "date": "2024-03-15T10:30:00",
                    "source": "banki.ru",
                },
                {
                    "id": 102,
                    "text": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∏—Å–Ω–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ!",
                    "date": "2024-03-16T14:20:00",
                    "source": "sravni.ru",
                },
                {
                    "id": 103,
                    "text": "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å —Ö–æ—Ä–æ—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.",
                    "date": "2024-03-17T09:15:00",
                    "source": "banki.ru",
                },
            ]
        }

        response = await client.post(f"{base_url}/load-data", json=load_data_reviews)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {result['loaded_count']}")
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")

        print("\n" + "=" * 80 + "\n")

        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
        print("4Ô∏è‚É£ GET /reviews")
        response = await client.get(f"{base_url}/reviews")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code == 200:
            reviews = response.json()
            print(f"   –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤ –≤ –±–∞–∑–µ: {len(reviews)}\n")

        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("5Ô∏è‚É£ GET /statistics")
        response = await client.get(f"{base_url}/statistics")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code == 200:
            stats = response.json()
            print(f"   –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total_reviews']}")
            if stats["date_range"]["start"]:
                print(f"   –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {stats['date_range']['start']} ‚Äî {stats['date_range']['end']}")
            print("\n   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for cat_stat in stats["categories"][:5]:
                print(f"   ‚Ä¢ {cat_stat['category']}: {cat_stat['total_count']} –æ—Ç–∑—ã–≤–æ–≤")
                print(
                    f"     ‚Ü≥ ‚úÖ {cat_stat['positive_percent']}% | "
                    f"‚ûñ {cat_stat['neutral_percent']}% | "
                    f"‚ùå {cat_stat['negative_percent']}%"
                )

        print("\n" + "=" * 80 + "\n")

        # 6. –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
        print("6Ô∏è‚É£ GET /statistics/timeline")
        response = await client.get(f"{base_url}/statistics/timeline?granularity=day")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code == 200:
            timeline = response.json()
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¥–∏–Ω–∞–º–∏–∫–æ–π: {len(timeline['categories'])}")
            if timeline["categories"]:
                cat = timeline["categories"][0]
                print(f"\n   –ü—Ä–∏–º–µ—Ä (–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{cat['category']}'):")
                for point in cat["timeline"][:3]:
                    print(
                        f"   {point['date']}: ‚úÖ {point['positive']} | ‚ûñ {point['neutral']} | ‚ùå {point['negative']}"
                    )

        print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(test_api())
