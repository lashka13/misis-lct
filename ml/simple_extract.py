#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
"""

import json
import pandas as pd

def extract_reviews_text(json_file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç—ã –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
    
    Args:
        json_file_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–∑—ã–≤–æ–≤
    """
    try:
        with open(json_file_path, 'r', encoding='utf-8') as file:
            reviews = json.load(file)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç—ã –æ—Ç–∑—ã–≤–æ–≤
        review_texts = []
        for review in reviews:
            if isinstance(review, dict) and 'review' in review:
                review_texts.append(review['review'])
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(review_texts)} —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–∑—ã–≤–æ–≤")
        return review_texts
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {json_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
        return []
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

def create_simple_dataset(review_texts):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –¥–∞—Ç–∞—Å–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –æ—Ç–∑—ã–≤–æ–≤
    
    Args:
        review_texts (list): –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–∑—ã–≤–æ–≤
        
    Returns:
        pd.DataFrame: –î–∞—Ç–∞—Å–µ—Ç —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –æ—Ç–∑—ã–≤–æ–≤
    """
    if not review_texts:
        print("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return pd.DataFrame()
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–∞–º–∏
    df = pd.DataFrame({
        'review_text': review_texts
    })
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–∞—Ç–∞—Å–µ—Ç —Å {len(df)} –æ—Ç–∑—ã–≤–∞–º–∏")
    return df

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    # –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    json_file = "/Users/nikitamesh/LCT/sravni.json"
    
    print("üöÄ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –æ—Ç–∑—ã–≤–æ–≤
    review_texts = extract_reviews_text(json_file)
    
    if not review_texts:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç—ã –æ—Ç–∑—ã–≤–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    df = create_simple_dataset(review_texts)
    
    if df.empty:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    output_file = "/Users/nikitamesh/LCT/reviews_text_only.csv"
    df.to_csv(output_file, index=False, encoding='utf-8')
    
    print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {len(df)}")
    print(f"üìù –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞:")
    print(f"   \"{df['review_text'].iloc[0][:100]}...\"")

if __name__ == "__main__":
    main()
